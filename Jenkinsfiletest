pipeline {
    agent any

    stages {
        stage('Parse CSV and Set Env') {
            steps {
                script {
                    // Define the path to your CSV file
                    def csvFilePath = "file.csv"

                    // Read the CSV file using the readFile step
                    def csvFileContent = readFile csvFilePath

                    // Split the content into lines
                    def lines = csvFileContent.readLines()

                    // Assuming the first row of the CSV contains the header
                    def header = lines[0].tokenize(',')

                    // Iterate through each row (starting from index 1)
                    for (def rowIndex = 1; rowIndex < lines.size(); rowIndex++) {
                        def row = lines[rowIndex].tokenize(',')
                        
                        // Iterate through the header and row to set environment variables
                        header.eachWithIndex { columnName, index ->
                            // Set environment variable for a specific column
                            env."${columnName.toUpperCase()}_VALUE_${rowIndex}" = row[index]
                            
                            // Your pipeline steps here
                            echo "Processing ${columnName}: ${row[index]} for row ${rowIndex}"
                            //echo "Environment Variable A (Row 1): ${env.A_VALUE_1}"
                            //echo "Environment Variable A (Row 2): ${env.A_VALUE_2}"                            
                        }
                    }
                }
            }
        }

        stage('Example Build') {
            steps {
                script {
                    // Access the environment variables set in the previous stage
                    echo "Environment Variable A (Row 1): ${env.A_VALUE_1}"
                    echo "Environment Variable A (Row 2): ${env.A_VALUE_2}"
                    // Add more as needed
                }
            }
        }
    }
}
